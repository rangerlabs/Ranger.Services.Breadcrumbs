// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Ranger.Services.Breadcrumbs.Data;

namespace Ranger.Services.Breadcrumbs.Data.Migrations
{
    [DbContext(typeof(BreadcrumbsDbContext))]
    [Migration("20200326021731_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FriendlyName")
                        .HasColumnName("friendly_name")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnName("xml")
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("pk_data_protection_keys");

                    b.ToTable("data_protection_keys");
                });

            modelBuilder.Entity("Ranger.Services.Breadcrumbs.Data.BreadcrumbEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<double>("Accuracy")
                        .HasColumnName("accuracy")
                        .HasColumnType("double precision");

                    b.Property<string>("DatabaseUsername")
                        .IsRequired()
                        .HasColumnName("database_username")
                        .HasColumnType("text");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<int>("Environment")
                        .HasColumnName("environment")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalUserId")
                        .HasColumnName("external_user_id")
                        .HasColumnType("text");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnName("position")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("RecordedAt")
                        .HasColumnName("recorded_at")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id")
                        .HasName("pk_breadcrumbs");

                    b.HasIndex("Environment");

                    b.HasIndex("ProjectId");

                    b.ToTable("breadcrumbs");
                });

            modelBuilder.Entity("Ranger.Services.Breadcrumbs.Data.BreadcrumbGeofenceResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BreadcrumbId")
                        .HasColumnName("breadcrumb_id")
                        .HasColumnType("integer");

                    b.Property<string>("DatabaseUsername")
                        .IsRequired()
                        .HasColumnName("database_username")
                        .HasColumnType("text");

                    b.Property<int?>("EnteredBreadcrumbId")
                        .HasColumnName("entered_breadcrumb_id")
                        .HasColumnType("integer");

                    b.Property<int>("GeofenceEvent")
                        .HasColumnName("geofence_event")
                        .HasColumnType("integer");

                    b.Property<Guid>("GeofenceId")
                        .HasColumnName("geofence_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_breadcrumb_geofence_results");

                    b.HasIndex("BreadcrumbId");

                    b.HasIndex("EnteredBreadcrumbId");

                    b.HasIndex("GeofenceEvent");

                    b.HasIndex("GeofenceId");

                    b.ToTable("breadcrumb_geofence_results");
                });

            modelBuilder.Entity("Ranger.Services.Breadcrumbs.Data.NotExitedBreadcrumbState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BreadcrumbId")
                        .HasColumnName("breadcrumb_id")
                        .HasColumnType("integer");

                    b.Property<string>("DatabaseUsername")
                        .IsRequired()
                        .HasColumnName("database_username")
                        .HasColumnType("text");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasColumnName("device_id")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnName("project_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_not_exited_breadcrumb_states");

                    b.HasIndex("BreadcrumbId")
                        .IsUnique()
                        .HasName("ix_not_exited_breadcrumb_states_breadcrumb_id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ProjectId");

                    b.ToTable("not_exited_breadcrumb_states");
                });

            modelBuilder.Entity("Ranger.Services.Breadcrumbs.Data.BreadcrumbGeofenceResult", b =>
                {
                    b.HasOne("Ranger.Services.Breadcrumbs.Data.BreadcrumbEntity", "Breadcrumb")
                        .WithMany("BreadcrumbGeofenceResults")
                        .HasForeignKey("BreadcrumbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ranger.Services.Breadcrumbs.Data.BreadcrumbEntity", "EnteredBreadcrumb")
                        .WithMany("EnteredBreadcrumbGeofenceResults")
                        .HasForeignKey("EnteredBreadcrumbId");
                });

            modelBuilder.Entity("Ranger.Services.Breadcrumbs.Data.NotExitedBreadcrumbState", b =>
                {
                    b.HasOne("Ranger.Services.Breadcrumbs.Data.BreadcrumbEntity", "Breadcrumb")
                        .WithOne("UnexitedEnteredBreadcrumb")
                        .HasForeignKey("Ranger.Services.Breadcrumbs.Data.NotExitedBreadcrumbState", "BreadcrumbId")
                        .HasConstraintName("fk_not_exited_breadcrumb_states_breadcrumbs_breadcrumb_id");
                });
#pragma warning restore 612, 618
        }
    }
}
